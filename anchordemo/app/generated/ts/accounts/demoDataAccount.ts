/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const DEMO_DATA_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  46, 83, 227, 133, 132, 174, 172, 182,
]);

export function getDemoDataAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEMO_DATA_ACCOUNT_DISCRIMINATOR
  );
}

export type DemoDataAccount = {
  discriminator: ReadonlyUint8Array;
  number: bigint;
  optionalKey: Option<Address>;
  text: string;
};

export type DemoDataAccountArgs = {
  number: number | bigint;
  optionalKey: OptionOrNullable<Address>;
  text: string;
};

export function getDemoDataAccountEncoder(): Encoder<DemoDataAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['number', getU64Encoder()],
      ['optionalKey', getOptionEncoder(getAddressEncoder())],
      ['text', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: DEMO_DATA_ACCOUNT_DISCRIMINATOR })
  );
}

export function getDemoDataAccountDecoder(): Decoder<DemoDataAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['number', getU64Decoder()],
    ['optionalKey', getOptionDecoder(getAddressDecoder())],
    ['text', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getDemoDataAccountCodec(): Codec<
  DemoDataAccountArgs,
  DemoDataAccount
> {
  return combineCodec(getDemoDataAccountEncoder(), getDemoDataAccountDecoder());
}

export function decodeDemoDataAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DemoDataAccount, TAddress>;
export function decodeDemoDataAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DemoDataAccount, TAddress>;
export function decodeDemoDataAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<DemoDataAccount, TAddress>
  | MaybeAccount<DemoDataAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDemoDataAccountDecoder()
  );
}

export async function fetchDemoDataAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DemoDataAccount, TAddress>> {
  const maybeAccount = await fetchMaybeDemoDataAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDemoDataAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DemoDataAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDemoDataAccount(maybeAccount);
}

export async function fetchAllDemoDataAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DemoDataAccount>[]> {
  const maybeAccounts = await fetchAllMaybeDemoDataAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDemoDataAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DemoDataAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeDemoDataAccount(maybeAccount)
  );
}
