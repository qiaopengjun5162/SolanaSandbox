/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedInitializeInstruction } from '../instructions';

export const ANCHORDEMO_PROGRAM_ADDRESS =
  'AnkpTFgp1wzTCZHU7kxQTsit4zQZuqpY4cDzgS5bQnCc' as Address<'AnkpTFgp1wzTCZHU7kxQTsit4zQZuqpY4cDzgS5bQnCc'>;

export enum AnchordemoAccount {
  DemoDataAccount,
}

export function identifyAnchordemoAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AnchordemoAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 83, 227, 133, 132, 174, 172, 182])
      ),
      0
    )
  ) {
    return AnchordemoAccount.DemoDataAccount;
  }
  throw new Error(
    'The provided account could not be identified as a anchordemo account.'
  );
}

export enum AnchordemoInstruction {
  Initialize,
}

export function identifyAnchordemoInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AnchordemoInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return AnchordemoInstruction.Initialize;
  }
  throw new Error(
    'The provided instruction could not be identified as a anchordemo instruction.'
  );
}

export type ParsedAnchordemoInstruction<
  TProgram extends string = 'AnkpTFgp1wzTCZHU7kxQTsit4zQZuqpY4cDzgS5bQnCc',
> = {
  instructionType: AnchordemoInstruction.Initialize;
} & ParsedInitializeInstruction<TProgram>;
